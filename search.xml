<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git使用记录</title>
    <url>/posts/a912528b/</url>
    <content><![CDATA[<h5 id="Git-warning：LF-will-be-replaced-by-CRLF-in-readme-txt的原因与解决方案"><a href="#Git-warning：LF-will-be-replaced-by-CRLF-in-readme-txt的原因与解决方案" class="headerlink" title="Git warning：LF will be replaced by CRLF in readme.txt的原因与解决方案"></a><a class="link"   href="https://blog.csdn.net/starry_night9280/article/details/53207928" >Git warning：LF will be replaced by CRLF in readme.txt的原因与解决方案<i class="fas fa-external-link-alt"></i></a></h5><span id="more"></span>

<blockquote>
<p>不同操作系统所使用的换行符是不一样的，下面罗列一下三大主流操作系统的换行符：<br>Uinx&#x2F;Linux采用换行符LF表示下一行（LF：LineFeed，中文意思是换行）；<br>Dos和Windows采用回车+换行CRLF表示下一行（CRLF：CarriageReturn LineFeed，中文意思是回车换行）；<br>Mac OS采用回车CR表示下一行（CR：CarriageReturn，中文意思是回车）。</p>
<p>在Git中，可以通过以下命令来显示当前你的Git中采取哪种对待换行符的方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config core.autocrlf</span><br></code></pre></td></tr></table></figure>

<p>此命令会有三个输出，“true”，“false”或者“input” 。</p>
<p>为true时，Git会将你add的所有文件视为文本问价你，将结尾的CRLF转换为LF，而checkout时会再将文件的LF格式转为CRLF格式。</p>
<p>为false时，line endings不做任何改变，文本文件保持其原来的样子。</p>
<p>为input时，add时Git会把CRLF转换为LF，而check时仍旧为LF，所以Windows操作系统不建议设置此值。</p>
<p><strong>解决办法：</strong></p>
<p>将core.autocrlf设为false即可解决这个问题，不过如果你和你的伙伴只工作于Windows平台或者Linux平台，那么没问题，不过如果是存在跨平台的现象的话，还是需要考虑一下。</p>
<p>但当 core autocrlf为true时，还有一个需要慎重的地方，当你上传一个二进制文件，Git可能会将二进制文件误以为是文本文件，从而也会修改你的二进制文件，从而产生隐患。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global core.autocrlf <span class="hljs-literal">true</span>   <span class="hljs-comment">#true的位置放你想使autocrlf成为的结果，true，false或者input</span></span><br></code></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的使用</title>
    <url>/posts/3b4634fc/</url>
    <content><![CDATA[<h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>通过<a class="link"   href="https://registry.npmmirror.com/binary.html?path=git-for-windows/" >淘宝镜像<i class="fas fa-external-link-alt"></i></a>找到最新的版本进行下载。</p>
<h3 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;v_hiker&quot;<br>git config --global user.email &quot;v_hiker@qq.com&quot;<br></code></pre></td></tr></table></figure>
<span id="more"></span>
<p>如果用了<code>--global</code>选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉<code>--global</code>选项重新配置即可，新的设定保存在当前项目的<code>.git/config</code>文件里。</p>
<p>要检查已有的配置信息，可以使用:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config --list<br></code></pre></td></tr></table></figure>
<p>删除配置，使用:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config --<span class="hljs-built_in">unset</span> user.name<br></code></pre></td></tr></table></figure>

<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>以<code>Clash</code>为例:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git config http.proxy=http://127.0.0.1:7890<br></code></pre></td></tr></table></figure>

<h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置<code>SSH</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;v_hiker@qq.com&quot;</span><br></code></pre></td></tr></table></figure>
<p>一路回车即可。在<code>C:\Users\wangy\.ssh</code>这个路径下会生成两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code></p>
<p>网页进入<code>Github</code>，找到<code>Settings=&gt;SSH and GPG keys=&gt;New SSH key</code>，添加<code>id_rsa.pub</code>中的内容。</p>
<h2 id="Node-JS"><a href="#Node-JS" class="headerlink" title="Node.JS"></a>Node.JS</h2><h3 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h3><p>在<code>Windows</code>上通过三方管理工具进行管理<code>node.Js</code>版本,这里使用<a href="https://github.com/creationix/nvm"><code>nvm</code></a>：</p>
<ol>
<li>根据官方文档在<code>PowerShell</code>中输入安装脚本进行安装。<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash<br></code></pre></td></tr></table></figure></li>
<li>重新打开终端，检查<code>nvm</code>安装情况。<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">nvm --version<br></code></pre></td></tr></table></figure></li>
<li>查看所有可供安装的<code>node.Js</code>版本。<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">nvm <span class="hljs-built_in">ls</span> available<br></code></pre></td></tr></table></figure></li>
<li>选择自己想要的版本进行安装。<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">nvm install v11.11.0<br></code></pre></td></tr></table></figure></li>
<li>查看本地已安装的<code>node.Js</code>。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">nvm <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure>

<p>安装完<code>nvm</code>之后，通过命令可以很简单地切换<code>node.Js</code>版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">nvm use 18.13.0<br></code></pre></td></tr></table></figure>
<h3 id="npm配置"><a href="#npm配置" class="headerlink" title="npm配置"></a>npm配置</h3><p>国内配置淘宝镜像加速下载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry <span class="hljs-string">&quot;https://registry.npmmirror.com/&quot;</span><br></code></pre></td></tr></table></figure>
<p>恢复：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry <span class="hljs-string">&quot;https://registry.npmjs.org/&quot;</span><br></code></pre></td></tr></table></figure>

<p> 查看是否更改成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm config get registry<br></code></pre></td></tr></table></figure>

<p>使用<code>npm</code>查看包版本:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm <span class="hljs-built_in">ls</span> -g --depth 0<br></code></pre></td></tr></table></figure>
<p>其中，<code>-g</code>代表全局，不查看全局去除即可。</p>
<p>检查更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm outdated<br></code></pre></td></tr></table></figure>
<p>需要更新模块，首先得更新<code>package.json</code>文件，可使用<code>npm-check-updates依赖包</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装&quot;npm-check-updates&quot;模块</span><br>npm install -g npm-check-updates<br> <br><span class="hljs-comment"># 安装后，检查可更新的模块</span><br>ncu<br><span class="hljs-comment"># 或</span><br>npm-check-updates<br> <br><span class="hljs-comment"># 更新package.json的依赖包到最新版本</span><br>ncu -u<br></code></pre></td></tr></table></figure>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>按照<a class="link"   href="https://hexo.io/zh-cn/docs/" >官方文档<i class="fas fa-external-link-alt"></i></a>很详细</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure>
<p>安装 Hexo 完成后，执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo init &lt;folder&gt;<br><span class="hljs-built_in">cd</span> &lt;folder&gt;<br>npm install<br></code></pre></td></tr></table></figure>
<p>这里<code>hexo</code>要求为空文件夹，所以版本控制需要后面进行关联.</p>
<p>安装完成后进入文件夹，执行预览命令，即可预览效果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure>
<p>根据输出打开链接即可:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">INFO</span>  Validating config<br><span class="hljs-keyword">INFO</span>  <span class="hljs-keyword">Start</span> processing<br><span class="hljs-keyword">INFO</span>  Hexo <span class="hljs-keyword">is</span> running at http://localhost:<span class="hljs-number">4000</span>/ . Press Ctrl+C <span class="hljs-keyword">to</span> stop.<br><span class="hljs-keyword">INFO</span>  Catch you later<br></code></pre></td></tr></table></figure>

<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="hexo-deployer-git"><a href="#hexo-deployer-git" class="headerlink" title="hexo-deployer-git"></a><a class="link"   href="https://github.com/hexojs/hexo-deployer-git" >hexo-deployer-git<i class="fas fa-external-link-alt"></i></a></h2><p>用于 一键部署<code>Github Pages</code>,参考<a class="link"   href="https://hexo.io/zh-cn/docs/one-command-deployment" >官方文档<i class="fas fa-external-link-alt"></i></a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure>


<h2 id="hexo-generator-searchdb"><a href="#hexo-generator-searchdb" class="headerlink" title="hexo-generator-searchdb"></a><a class="link"   href="https://github.com/theme-next/hexo-generator-searchdb" >hexo-generator-searchdb<i class="fas fa-external-link-alt"></i></a></h2><p>支持本地搜索, 安装命令: </p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">npm install hexo-generator-searchdb <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure>

<h2 id="hexo-generator-sitemap"><a href="#hexo-generator-sitemap" class="headerlink" title="hexo-generator-sitemap"></a><a class="link"   href="https://github.com/hexojs/hexo-generator-sitemap" >hexo-generator-sitemap<i class="fas fa-external-link-alt"></i></a></h2><p>部署时生成<code>sitemap</code>文件, 安装命令: </p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">npm install hexo-generator-sitemap <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure>

<h2 id="hexo-generator-baidu-sitemap"><a href="#hexo-generator-baidu-sitemap" class="headerlink" title="hexo-generator-baidu-sitemap"></a><a class="link"   href="https://github.com/coneycode/hexo-generator-baidu-sitemap" >hexo-generator-baidu-sitemap<i class="fas fa-external-link-alt"></i></a></h2><p>百度所需<code>sitemap</code>生成器, 安装命令:  </p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>hexo-generator-<span class="hljs-keyword">baidu-sitemap </span>--save<br></code></pre></td></tr></table></figure>

<h2 id="hexo-symbols-count-time"><a href="#hexo-symbols-count-time" class="headerlink" title="hexo-symbols-count-time"></a><a class="link"   href="https://github.com/theme-next/hexo-symbols-count-time" >hexo-symbols-count-time<i class="fas fa-external-link-alt"></i></a></h2><p>统计文章字数, 安装命令: </p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">npm install hexo-symbols-<span class="hljs-built_in">count</span>-<span class="hljs-built_in">time</span><br></code></pre></td></tr></table></figure>

<h2 id="hexo-abbrlink"><a href="#hexo-abbrlink" class="headerlink" title="hexo-abbrlink"></a><a class="link"   href="https://github.com/Rozbo/hexo-abbrlink" >hexo-abbrlink<i class="fas fa-external-link-alt"></i></a></h2><p>生成永久链接</p>
<p>Add plugin to Hexo:</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">npm install hexo-abbrlink <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure>

<p>Modify permalink in config.yml file:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">permalink: posts<span class="hljs-regexp">/:abbrlink/</span><br></code></pre></td></tr></table></figure>

<p>There are two settings:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">alg</span> <span class="hljs-string">--</span> <span class="hljs-string">Algorithm</span> <span class="hljs-string">(currently</span> <span class="hljs-string">support</span> <span class="hljs-string">crc16</span> <span class="hljs-string">and</span> <span class="hljs-string">crc32,</span> <span class="hljs-string">which</span> <span class="hljs-string">crc16</span> <span class="hljs-string">is</span> <span class="hljs-string">default)</span><br><span class="hljs-string">rep</span> <span class="hljs-string">--</span> <span class="hljs-string">Represent</span> <span class="hljs-string">(the</span> <span class="hljs-string">generated</span> <span class="hljs-string">link</span> <span class="hljs-string">could</span> <span class="hljs-string">be</span> <span class="hljs-string">presented</span> <span class="hljs-string">in</span> <span class="hljs-string">hex</span> <span class="hljs-string">or</span> <span class="hljs-string">dec</span> <span class="hljs-string">value)</span><br><span class="hljs-comment"># abbrlink config</span><br><span class="hljs-attr">abbrlink:</span><br>  <span class="hljs-attr">alg:</span> <span class="hljs-string">crc32</span>      <span class="hljs-comment">#support crc16(default) and crc32</span><br>  <span class="hljs-attr">rep:</span> <span class="hljs-string">hex</span>        <span class="hljs-comment">#support dec(default) and hex</span><br>  <span class="hljs-attr">drafts:</span> <span class="hljs-literal">false</span>   <span class="hljs-comment">#(true)Process draft,(false)Do not process draft. false(default) </span><br>  <span class="hljs-comment"># Generate categories from directory-tree</span><br>  <span class="hljs-comment"># depth: the max_depth of directory-tree you want to generate, should &gt; 0</span><br>  <span class="hljs-attr">auto_category:</span><br>     <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#true(default)</span><br>     <span class="hljs-attr">depth:</span>        <span class="hljs-comment">#3(default)</span><br>     <span class="hljs-attr">over_write:</span> <span class="hljs-literal">false</span> <br>  <span class="hljs-attr">auto_title:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#enable auto title, it can auto fill the title by path</span><br>  <span class="hljs-attr">auto_date:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#enable auto date, it can auto fill the date by time today</span><br>  <span class="hljs-attr">force:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for e</span><br></code></pre></td></tr></table></figure>

<p>具体使用时根据相关官方页面进行配置。</p>
<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>在<a class="link"   href="https://hexo.io/themes/" >主题市场<i class="fas fa-external-link-alt"></i></a>中进行选择，并按照文档安装。<br>为了保持配置的备份和方便修改，可以在<code>Hexo</code>根目录创建独立的<code>_config.[theme].yml</code>文件。<br><code>Hexo</code>在合并主题配置时，<code>Hexo</code>配置文件中的<code>theme_config</code>的优先级最高，其次是<code>_config.[theme].yml</code>文件，最后是位于主题目录下的<code>_config.yml</code>文件。</p>
<h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><ol>
<li>新建私有仓库，复制远程地址，以下以<code>hexo-source</code>作为仓库名。</li>
<li>关联Git仓库<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">cd &lt;<span class="hljs-built_in">folder</span>&gt;<br><br><span class="hljs-comment">#初始化本地仓库</span><br>git init<br><br><span class="hljs-comment">#新建本地分支</span><br>git checkout -b master<br><br><span class="hljs-comment">#关联远程仓库</span><br>git remote <span class="hljs-built_in">add</span> origin git@github.com:v-hiker/hexo-source.git<br><br><span class="hljs-comment">#获取远程信息</span><br>git fetch <span class="hljs-comment">--all</span><br><br><span class="hljs-comment">#commit到本地</span><br>git <span class="hljs-built_in">add</span> .<br>git commit -m <span class="hljs-string">&quot;init&quot;</span><br><br><span class="hljs-comment">#设置远程分支</span><br>git branch <span class="hljs-comment">--set-upstream-to=origin/hexo hexo</span><br><br><span class="hljs-comment">#强制推送，这里以本地的文件为准，直接强制推送，覆盖远程仓库即可</span><br>git push <span class="hljs-comment">--force</span><br></code></pre></td></tr></table></figure></li>
</ol>
<p>后续对于修改的内容直接执行<code>Git</code>提交流程即可。</p>
<h1 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a><code>Hexo</code>常用命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hexo new &quot;postName&quot; #新建文章<br>hexo new page &quot;pageName&quot; #新建页面<br>hexo clean #删除本地已创建的网页<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）<br>hexo deploy #部署到GitHub<br>hexo help  # 查看帮助<br>hexo version  #查看Hexo的版本<br></code></pre></td></tr></table></figure>

<p>设置文章摘要的长度: 在合适的位置加上<code>&lt;!--more--&gt;</code>即可</p>
<h1 id="一键部署和备份"><a href="#一键部署和备份" class="headerlink" title="一键部署和备份"></a>一键部署和备份</h1><p>新建脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#hexo部署 </span><br>hexo clean<br>hexo g<br>hexo d<br><br><span class="hljs-comment">#备份源码</span><br>git add .<br>git commit -m <span class="hljs-string">&quot;update blog&quot;</span><br>git push origin master<br></code></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
        <tag>Node.Js</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle和MySQL常用区别</title>
    <url>/posts/5febf8d0/</url>
    <content><![CDATA[<h3 id="XML条件查询优化"><a href="#XML条件查询优化" class="headerlink" title="XML条件查询优化"></a>XML条件查询优化</h3><h4 id="避免使用where-1-1"><a href="#避免使用where-1-1" class="headerlink" title="避免使用where 1=1"></a>避免使用<code>where 1=1</code></h4><span id="more"></span>

<p>当遇到多个查询条件，使用<code>where 1=1</code>可以很方便的解决我们的问题，但是这样很可能会造成非常大的性能损失，</p>
<p>因为添加了<code>where 1=1</code>的过滤条件之后，数据库系统就无法使用索引等查询优化策略，数据库系统将会被迫对每行数据进行扫描（即全表扫描）以比较此行是否满足过滤条件，当表中的数据量较大时查询速度会非常慢；</p>
<p>此外，还会存在SQL 注入的风险。</p>
<h5 id="反例如下："><a href="#反例如下：" class="headerlink" title="反例如下："></a>反例如下：</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> id<span class="hljs-operator">=</span>&quot;queryBookInfo&quot; parameterType<span class="hljs-operator">=</span>&quot;com.tjt.platform.entity.BookInfo&quot; resultType<span class="hljs-operator">=</span>&quot;java.lang.Integer&quot;<span class="hljs-operator">&gt;</span><br> <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> t_rule_BookInfo t <span class="hljs-keyword">where</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br> <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;title !=null and title !=&#x27;&#x27; &quot;<span class="hljs-operator">&gt;</span><br>  <span class="hljs-keyword">AND</span> title <span class="hljs-operator">=</span> #&#123;title&#125; <br> <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span> <br> <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;author !=null and author !=&#x27;&#x27; &quot;<span class="hljs-operator">&gt;</span><br>  <span class="hljs-keyword">AND</span> author <span class="hljs-operator">=</span> #&#123;author&#125;<br> <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">select</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure>

<h5 id="正例："><a href="#正例：" class="headerlink" title="正例："></a>正例：</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> id<span class="hljs-operator">=</span>&quot;queryBookInfo&quot; parameterType<span class="hljs-operator">=</span>&quot;com.tjt.platform.entity.BookInfo&quot; resultType<span class="hljs-operator">=</span>&quot;java.lang.Integer&quot;<span class="hljs-operator">&gt;</span><br> <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> t_rule_BookInfo t<br> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">where</span><span class="hljs-operator">&gt;</span><br> <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;title !=null and title !=&#x27;&#x27; &quot;<span class="hljs-operator">&gt;</span><br>  title <span class="hljs-operator">=</span> #&#123;title&#125; <br> <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br> <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;author !=null and author !=&#x27;&#x27; &quot;<span class="hljs-operator">&gt;</span> <br>  <span class="hljs-keyword">AND</span> author <span class="hljs-operator">=</span> #&#123;author&#125;<br> <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br> <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">where</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">select</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="获取行号"><a href="#获取行号" class="headerlink" title="获取行号"></a>获取行号</h3><p>oracle：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> A.<span class="hljs-operator">*</span>,rownum <span class="hljs-keyword">from</span> A;<br></code></pre></td></tr></table></figure>

<p>mysql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.<span class="hljs-operator">*</span> ,<span class="hljs-variable">@rownum</span>:<span class="hljs-operator">=</span><span class="hljs-variable">@rownum</span><span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">from</span> a,(<span class="hljs-keyword">select</span> <span class="hljs-variable">@rownum</span>:<span class="hljs-operator">=</span><span class="hljs-number">0</span>) r<br></code></pre></td></tr></table></figure>

<p>mysql中没有获取行号的函数，因此需要通过一些自定义语句来进行获取。通常做法是，通过定义用户变量@rownum来保存表中的数据。通过赋值语句@rownum：&#x3D;@rownum+1来累加达到递增行号。<br>例如：</p>
<p><code>select a.* ,@rownum:=@rownum+1 from a,(select @rownum:=0) r;</code></p>
<p>后半部分语句的<code>select @rownum:=0</code>相当于创建了<code>r</code>的新表，其表的列为<code>@rownum</code>，数值为0.</p>
<p>通过利用变量将<code>@rownum</code>的行进行重新赋值，并显示。可以应用于获取行号或名次排列。</p>
<p>另外，在名次排列时，由于会有重复的数据，排列时仅仅按照,<code>@rownum:=@rownum+1</code>。排序是不对的，需要在数据相同时，名次应该相同。因此需要另一变量保存上次的数据，并进行与本行数据对比，相同 序号不变，不同序号应该等于行号。此时需要应用到<code>case when</code>进行判断，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Select</span> a.<span class="hljs-operator">*</span>,<br><span class="hljs-keyword">Case</span><br><span class="hljs-keyword">When</span> <span class="hljs-variable">@rownum0</span><span class="hljs-operator">=</span>a.c_id  <span class="hljs-keyword">then</span>  <span class="hljs-variable">@rownum</span>:<span class="hljs-operator">=</span><span class="hljs-variable">@rownum</span><span class="hljs-operator">+</span><span class="hljs-number">1</span><br><span class="hljs-keyword">When</span> <span class="hljs-variable">@rownum0</span>:<span class="hljs-operator">=</span>a.c_id  <span class="hljs-keyword">then</span>  <span class="hljs-variable">@rownum</span>:<span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-keyword">Else</span>  <span class="hljs-variable">@rownum</span><br><span class="hljs-keyword">End</span> rank1,<br><span class="hljs-keyword">Case</span><br><span class="hljs-keyword">When</span> <span class="hljs-variable">@rownum1</span><span class="hljs-operator">=</span>a.s_score <span class="hljs-keyword">then</span> <span class="hljs-variable">@rownum2</span><br><span class="hljs-keyword">When</span> <span class="hljs-variable">@rownum1</span>:<span class="hljs-operator">=</span>a.s_score <span class="hljs-keyword">then</span> <span class="hljs-variable">@rownum2</span>:<span class="hljs-operator">=</span><span class="hljs-variable">@rownum</span><br><span class="hljs-keyword">Else</span> <span class="hljs-variable">@rownum2</span><br><span class="hljs-keyword">End</span> rank2<br> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> score  <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> c_id ,s_score <span class="hljs-keyword">desc</span><br>) <span class="hljs-keyword">as</span> a,(<span class="hljs-keyword">select</span> <span class="hljs-variable">@rownum</span>:<span class="hljs-operator">=</span><span class="hljs-number">0</span>, <span class="hljs-variable">@rownum0</span>:<span class="hljs-operator">=</span><span class="hljs-number">0</span>,<span class="hljs-variable">@rownum1</span>:<span class="hljs-operator">=</span><span class="hljs-number">0</span>,<span class="hljs-variable">@rownum2</span>:<span class="hljs-operator">=</span><span class="hljs-number">0</span>) r;<br></code></pre></td></tr></table></figure>

<h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p>oracle：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> A.<span class="hljs-operator">*</span>,B.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A,B <span class="hljs-keyword">where</span> a.id <span class="hljs-operator">=</span> b.id(<span class="hljs-operator">+</span>);<br></code></pre></td></tr></table></figure>

<p>mysql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> A.<span class="hljs-operator">*</span>,B.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> B <span class="hljs-keyword">on</span> a.id <span class="hljs-operator">=</span> b.id;<br></code></pre></td></tr></table></figure>

<h3 id="空值排序"><a href="#空值排序" class="headerlink" title="空值排序"></a>空值排序</h3><p>oracle：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> COUNTRY <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> PHONEORDER <span class="hljs-keyword">asc</span> nulls <span class="hljs-keyword">last</span><br></code></pre></td></tr></table></figure>

<p>mysql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> COUNTRY <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> PHONEORDER <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>,PHONEORDER<br></code></pre></td></tr></table></figure>

<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>从小到大升序排列时，null会出现在最前方，现在要将其放在后面</p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>方式一 ：</p>
<p><code>SELECT * FROM test ORDER BY num IS NULL , num;</code></p>
<p>方式二：</p>
<p><code>select * from test order by if(isnull(num),1,0), num desc;</code></p>
<p>1.将null强制放在最前：</p>
<p><code>if(isnull(字段名),0,1) asc   //asc可以省略</code></p>
<p>2.将null强制放在最后</p>
<p><code>if(isnull(字段名),0,1) desc</code></p>
<p><code>if(isnull(字段名),1,0)  asc   //asc可以省略</code></p>
<p>查询空值的运行速度基本上为<code>IFNULL()&gt;is NULL&gt;ISNULL()</code>。</p>
<h3 id="时间转字符串"><a href="#时间转字符串" class="headerlink" title="时间转字符串"></a>时间转字符串</h3><p>oracle：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">to_char<br></code></pre></td></tr></table></figure>

<p>mysql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">date_format(<span class="hljs-type">date</span>,<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p><a class="link"   href="https://www.w3school.com.cn/sql/func_date_format.asp" >https://www.w3school.com.cn/sql/func_date_format.asp<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="比较时间"><a href="#比较时间" class="headerlink" title="比较时间"></a>比较时间</h3><p>oracle：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A <span class="hljs-keyword">where</span><br>to_date(to_char(EVENT_DATE,<span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>),<span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>) <span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span>to_date(to_char(#&#123;fndPortalSystemLogDto.startDate&#125;,<span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>),<span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p>mysql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A <span class="hljs-keyword">where</span> STR_TO_DATE(<span class="hljs-string">&#x27;2017-01-06 10:20:30&#x27;</span>,<span class="hljs-string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>)<br></code></pre></td></tr></table></figure>

<h3 id="拼音排序"><a href="#拼音排序" class="headerlink" title="拼音排序"></a>拼音排序</h3><p>oracle：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> nlssort(NAME_ZH,<span class="hljs-string">&#x27;NLS_SORT=SCHINESE_PINYIN_M&#x27;</span>) <span class="hljs-keyword">ASC</span><br></code></pre></td></tr></table></figure>

<p>mysql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">convert</span>(name <span class="hljs-keyword">using</span> gbk) <span class="hljs-keyword">asc</span><br></code></pre></td></tr></table></figure>

<p>按照汉字的拼音排序，用的比较多是在人名的排序中，按照姓氏的拼音字母，从A到Z排序；<br>如果存储姓名的字段采用的是GBK字符集，那就好办了，因为GBK内码编码时本身就采用了拼音排序的方法（常用一级汉字3755个采用拼音排序，二级汉字就不是了，但考虑到人名等都是常用汉字，因此只是针对一级汉字能正确排序也够用了）。</p>
<p>直接在查询语句后面 添加 order by name asc; 查询结果按照姓氏的升序排序；</p>
<p>如果存储姓名的字段采用的是 utf8字符集，需要在排序的时候对字段进行转码；<code>order by convert(name using gbk) asc</code>; 同样，查询的结果也是按照姓氏的升序排序；</p>
<h3 id="取当前时间"><a href="#取当前时间" class="headerlink" title="取当前时间"></a>取当前时间</h3><p>oracle：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> T <span class="hljs-keyword">WHERE</span> CREATE_TIME <span class="hljs-operator">=</span> sysdate<br></code></pre></td></tr></table></figure>

<p>mysql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> T <span class="hljs-keyword">WHERE</span> CREATE_TIME <span class="hljs-operator">=</span> now()<br></code></pre></td></tr></table></figure>

<p>mysql中日期函数还是比较常用的。主要有NOW()和SYSDATE()两种，虽然都表示当前时间，但使用上有一点点区别。<br>NOW()取的是语句开始执行的时间，SYSDATE()取的是动态的实时时间。</p>
<p>因为NOW()取自mysql的一个变量”TIMESTAMP”，而这个变量在语句开始执行的时候就设定好了，因此在整个语句执行过程中都不会变化。</p>
<p>NOW()还有3个同义词，效果跟NOW()一样，而且都有2种形式写法：</p>
<p><code>LOCALTIME或LOCALTIME()</code></p>
<p><code>LOCALTIMESTAMP或LOCALTIMESTAMP()</code></p>
<p><code>CURRENT_TIMESTAMP或CURRENT_TIMESTAMP()</code></p>
<h3 id="列转行函数listagg"><a href="#列转行函数listagg" class="headerlink" title="列转行函数listagg()"></a>列转行函数listagg()</h3><p>oracle：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">listagg</span>(score, <span class="hljs-string">&#x27;,&#x27;</span>) <span class="hljs-keyword">within</span> <span class="hljs-keyword">group</span>(<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> )<br></code></pre></td></tr></table></figure>

<p>mysql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `name`,group_concat(score separator <span class="hljs-string">&#x27;,&#x27;</span>) <span class="hljs-keyword">from</span> test <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> `name`<br></code></pre></td></tr></table></figure>

<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>oracle：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">T1.EMAIL <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-operator">||</span> #&#123;basePortalUser.email&#125; <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;%&#x27;</span><br></code></pre></td></tr></table></figure>

<p>mysql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">like</span> concat(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;param&#125;,<span class="hljs-string">&#x27;%&#x27;</span>) <br></code></pre></td></tr></table></figure>

<p>推荐使用前者，可以避免sql注入。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%$&#123;param&#125;%&#x27;</span> <br></code></pre></td></tr></table></figure>

<p>oracle中的“||”是连接字符串的作用，mysql中需要用concat(a,b,c)方法</p>
<h3 id="查看表注释"><a href="#查看表注释" class="headerlink" title="查看表注释"></a>查看表注释</h3><p>oracle：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>TABLE_NAME,<br>COMMENTS DESCRIPTION<br><span class="hljs-keyword">FROM</span><br>all_tab_comments<br><span class="hljs-keyword">WHERE</span><br>table_name <span class="hljs-operator">=</span> #&#123;tableName,jdbcType<span class="hljs-operator">=</span><span class="hljs-type">VARCHAR</span>&#125;<br></code></pre></td></tr></table></figure>

<p>mysql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>	TABLE_NAME,<br>	TABLE_COMMENT  <br><span class="hljs-keyword">FROM</span><br>	INFORMATION_SCHEMA.TABLES <br><span class="hljs-keyword">WHERE</span><br>	table_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;base_portal_file&#x27;</span> <br>	<span class="hljs-keyword">AND</span> table_schema <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;base&#x27;</span><br></code></pre></td></tr></table></figure>

<h3 id="查看表中列结构"><a href="#查看表中列结构" class="headerlink" title="查看表中列结构"></a>查看表中列结构</h3><p>oracle：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>  T1.COLUMN_NAME FIELD_NAME,<br>  T1.DATA_TYPE TYPE,<br>  T2.COMMENTS DESCRIPTION,<br>  T1.COLUMN_ID<br><span class="hljs-keyword">FROM</span><br>  USER_TAB_COLS T1<br>  <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> USER_COL_COMMENTS T2 <span class="hljs-keyword">ON</span> T1.TABLE_NAME <span class="hljs-operator">=</span> T2.TABLE_NAME <span class="hljs-keyword">AND</span> T1.COLUMN_NAME <span class="hljs-operator">=</span> T2.COLUMN_NAME<br><span class="hljs-keyword">WHERE</span><br>  T1.TABLE_NAME <span class="hljs-operator">=</span> #&#123;tableName,jdbcType<span class="hljs-operator">=</span><span class="hljs-type">VARCHAR</span>&#125;<br>  <span class="hljs-keyword">AND</span> T1.VIRTUAL_COLUMN <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;NO&#x27;</span><br></code></pre></td></tr></table></figure>

<p>mysql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>	column_name COLUMN_NAME,<br>	DATA_TYPE,<br><span class="hljs-keyword">CASE</span><br>	DATA_TYPE <br>	<span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;decimal&#x27;</span> <span class="hljs-keyword">THEN</span><br>	NUMERIC_PRECISION <br>	<span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;datetime&#x27;</span> <span class="hljs-keyword">THEN</span><br>	DATETIME_PRECISION <span class="hljs-keyword">ELSE</span> character_maximum_length <br>	<span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> DATA_LENGTH,<br>	IS_NULLABLE NULLABLE,<br>	column_comment DESCRIPTION,<br>	ORDINAL_POSITION COLUMN_ORDER <br><span class="hljs-keyword">FROM</span><br>	information_schema.COLUMNS <br><span class="hljs-keyword">WHERE</span><br>	table_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;AE_JOURNAL_TYPE&#x27;</span> <br>  <span class="hljs-keyword">and</span> generation_expression <span class="hljs-keyword">is</span> <span class="hljs-keyword">empty</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>	ORDINAL_POSITION <span class="hljs-keyword">ASC</span><br></code></pre></td></tr></table></figure>

<h3 id="判断为空并格式化"><a href="#判断为空并格式化" class="headerlink" title="判断为空并格式化"></a>判断为空并格式化</h3><p>oracle:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> nvl(amount,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> scm_example<br></code></pre></td></tr></table></figure>

<p>mysql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> IFNULL(amount,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> scm_example<br></code></pre></td></tr></table></figure>

<h3 id="实现差集MINUS"><a href="#实现差集MINUS" class="headerlink" title="实现差集MINUS"></a>实现差集MINUS</h3><p>oracle:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> member_id, name <span class="hljs-keyword">FROM</span> a<br>MINUS<br><span class="hljs-keyword">SELECT</span> member_id, name <span class="hljs-keyword">FROM</span> b<br></code></pre></td></tr></table></figure>

<p>mysql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> member_id, name<br><span class="hljs-keyword">FROM</span> a<br><span class="hljs-keyword">WHERE</span> (member_id, name) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span><br>(<span class="hljs-keyword">SELECT</span> member_id, name <span class="hljs-keyword">FROM</span> table2);<br></code></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> a.member_id, a.name<br><span class="hljs-keyword">FROM</span> a <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> b <span class="hljs-keyword">USING</span> (member_id, name)<br><span class="hljs-keyword">WHERE</span> b.member_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">using</span>() 中 （） 必需<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Oracle</tag>
        <tag>MySQL</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA Spring Boot 项目相关问题</title>
    <url>/posts/7761f6cf/</url>
    <content><![CDATA[<h1 id="IDEA设置"><a href="#IDEA设置" class="headerlink" title="IDEA设置"></a>IDEA设置</h1><h2 id="字体不规则"><a href="#字体不规则" class="headerlink" title="字体不规则"></a>字体不规则</h2><p>在使用idea2019.2时存在中文字体忽大忽小不规范的问题，</p>
<p><code>File =&gt; Settings =&gt; Editor =&gt; Font</code>调整<code>Fallback font</code>为<code>SimHei</code>、<code>SimSun</code>、<code>YouYuan</code>等</p>
<h2 id="自动换行"><a href="#自动换行" class="headerlink" title="自动换行"></a>自动换行</h2><ul>
<li><code>settings =&gt; editor =&gt; code style =&gt; default options</code>勾选<code>wrap on typing</code></li>
<li><code>settings =&gt; editor =&gt; code style =&gt; java =&gt; wrapping and braces</code>勾选<code>ensure right margin is not exceeded</code></li>
</ul>
<span id="more"></span>

<h1 id="编译问题"><a href="#编译问题" class="headerlink" title="编译问题"></a>编译问题</h1><h2 id="duplicate-declaration-of-version"><a href="#duplicate-declaration-of-version" class="headerlink" title="duplicate declaration of version"></a><code>duplicate declaration of version</code></h2><p>版本重复，检查<code>pom.xml</code>定义是否重复</p>
<h2 id="引用自定义包报错"><a href="#引用自定义包报错" class="headerlink" title="引用自定义包报错"></a>引用自定义包报错</h2><p><code>The POM for xxxx is missing, no dependency information available</code></p>
<p>可能是打包方式错误，使用了</p>
<p><code>mvn package -Dmaven.test.skip=true</code></p>
<p>而不是</p>
<p><code>mvn clean install -Dmaven.test.skip=true</code></p>
<ul>
<li><code>mvn clean package</code>：删除目标文件夹、编译代码并打包</li>
<li><code>mvn clean install</code>：删除目标文件夹、编译代码并打包、将打好的包放置到本地仓库中</li>
</ul>
<h1 id="依赖问题"><a href="#依赖问题" class="headerlink" title="依赖问题"></a>依赖问题</h1><p>新下载的项目，下载依赖后依赖还是显示无法找到，或者<code>IDEA</code>中一直显示波浪线</p>
<p>分为以下两种情况:</p>
<ul>
<li><p>依赖未下载完整，文件全部为<code>*.lastUpdated</code></p>
</li>
<li><p>依赖文件完整，<code>IDEA</code>飘红不报错</p>
</li>
</ul>
<p>对于第一种情况，可以删除相关临时文件后尝试重新下载。</p>
<p>以下为删除脚本，在相应目录下执行:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># windows</span><br><span class="hljs-keyword">for</span> /r %i <span class="hljs-keyword">in</span> (*.lastUpdated) <span class="hljs-keyword">do</span> del %i<br></code></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># linux</span><br>find ./ -name <span class="hljs-string">&quot;*.lastUpdated*&quot;</span> | xargs <span class="hljs-built_in">rm</span> -f<br></code></pre></td></tr></table></figure>

<p>对于第二种情况，可能是<code>IDEA</code>的缓存导致，可以尝试剪切<code>pom.xml</code>文件中相关依赖,<code>import change</code>后重新添加并刷新。</p>
<h1 id="启动问题"><a href="#启动问题" class="headerlink" title="启动问题"></a>启动问题</h1><h2 id="启动时找不到主类"><a href="#启动时找不到主类" class="headerlink" title="启动时找不到主类"></a>启动时找不到主类</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">错误: 找不到或无法加载主类 XXXX</span><br><span class="hljs-section">原因: java.lang.ClassNotFoundException: XXXX</span><br></code></pre></td></tr></table></figure>

<p>大概率是编译结果问题，尝试<code>mvn clean install</code>。</p>
<h2 id="警告非法的反射访问操作"><a href="#警告非法的反射访问操作" class="headerlink" title="警告非法的反射访问操作"></a>警告非法的反射访问操作</h2><p><code>An illegal reflective access operation has occurred</code></p>
<p>原因：<code>JDK9</code>以上模块不能使用反射去访问非公有的成员&#x2F;成员方法以及构造方法，除非模块标识为<code>opens</code>去允许反射访问。旧<code>JDK</code>制作的库（<code>JDK8</code>及以下）运行在<code>JDK9</code>上会自动被标识为未命名模块，为了处理该警告，<code>JDK9</code>以上提出了一个新的<code>JVM</code>参数：<code>--illegal-access</code></p>
<p>该参数有四个可选值：</p>
<ul>
<li><code>permit</code>：默认值，允许通过反射访问，因此会提示像上面一样的警告，这个是首次非法访问警告，后续不警告</li>
<li><code>warn</code>：每次非法访问都会警告</li>
<li><code>debug</code>：在warn的基础上加入了类似<code>e.printStackTrace()</code>的功能</li>
<li><code>deny</code>：禁止所有的非法访问除了使用特别的命令行参数排除的模块，比如使用–add-opens排除某些模块使其能够通过非法反射访问</li>
</ul>
<p>解决方法一: 设置以下<code>JVM</code>参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">--illegal-access=deny --add-opens java.base/java.lang=ALL-UNNAMED<br></code></pre></td></tr></table></figure>

<p><code>IDEA</code>可以在运行配置中的<code>VM options</code>中添加上述参数</p>
<p>如果使用<code>Maven</code>打包的时候还是会出现警告，可以在<code>IDEA</code>中的<code>Maven</code>配置中添加全局的<code>Maven</code>参数</p>
<p>如果使用<code>Gradle</code>,在<code>build.gradle</code>中添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">test &#123;<br>    useJUnitPlatform()<br>    jvmArgs(<span class="hljs-string">&#x27;--illegal-access=deny&#x27;</span>)<br>    jvmArgs(<span class="hljs-string">&#x27;--add-opens&#x27;</span>, <span class="hljs-string">&#x27;java.base/java.lang.invoke=ALL-UNNAMED&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="MalformedInputException"><a href="#MalformedInputException" class="headerlink" title="MalformedInputException"></a><code>MalformedInputException</code></h2><p>启动服务时报错：</p>
<p><code>Caused by: java.nio.charset.MalformedInputException: Input length = 1</code></p>
<p>编码设置有问题，</p>
<p><code>File =&gt; Settings =&gt; Editor =&gt; File Encodings</code></p>
<p>将所有的格式都转成<code>utf-8</code>格式。</p>
<h1 id="运行问题"><a href="#运行问题" class="headerlink" title="运行问题"></a>运行问题</h1><h2 id="MySQL插入emoji报错"><a href="#MySQL插入emoji报错" class="headerlink" title="MySQL插入emoji报错"></a>MySQL插入emoji报错</h2><p><code>Incorrect string value: &#39;\xF0\x9F\x90\x96&#39; for column</code></p>
<p>原因：</p>
<p><code>MySQL</code>的<code>utf8</code>编码最多3个字节，算不上真正的<code>utf8</code>字符集。</p>
<p>在<code>MySQL5.5.3</code>的版本增加了<code>utf8mb4</code>编码集，专门用于兼容4个字节的<code>unicode</code>。</p>
<ol>
<li><p>检查<code>MySQL</code>版本是否支持<code>utf8mb4</code>编码：</p>
<p> <code>select version();</code></p>
</li>
<li><p>修改<code>MySQL</code>配置文件<br>打开<code>MySQL</code>配置文件<code>mysql/my.cnf</code>或<code>mysql/my.ini</code>, 并且添加如下内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[client]</span><br><span class="hljs-attr">default-character-set</span>=utf8mb4<br><br><span class="hljs-section">[mysql]</span><br><span class="hljs-attr">default-character-set</span>=utf8mb4<br><br><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">character-set-client-handshake</span>=<span class="hljs-literal">FALSE</span><br><span class="hljs-attr">character-set-server</span>=utf8mb4<br><span class="hljs-attr">collation-server</span>=utf8mb4_unicode_ci<br><span class="hljs-attr">init_connect</span>=<span class="hljs-string">&#x27;SET NAMES utf8mb4&#x27;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>重启数据库</p>
<ul>
<li>Windows到服务管理界面重新启动<code>MySql</code>服务：<code>services.msc</code></li>
<li>Linux执行命令：<code>/etc/init.d/mysql restart</code></li>
</ul>
</li>
<li><p>检查数据库配置</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">WHERE</span> Variable_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;character_set_%&#x27;</span> <span class="hljs-keyword">OR</span> Variable_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;collation%&#x27;</span>;<br><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------+--------------------+</span><br><span class="hljs-operator">|</span> Variable_name                         <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------+--------------------+</span><br><span class="hljs-operator">||</span> character_set_client         <span class="hljs-operator">|</span> utf8mb4 <br><span class="hljs-operator">||</span> character_set_connection <span class="hljs-operator">|</span> utf8mb4 <br><span class="hljs-operator">||</span> character_set_database     <span class="hljs-operator">|</span> utf8mb4 <br><span class="hljs-operator">||</span> character_set_filesystem <span class="hljs-operator">|</span> <span class="hljs-type">binary</span> <br><span class="hljs-operator">||</span> character_set_results         <span class="hljs-operator">|</span> utf8mb4 <br><span class="hljs-operator">||</span> character_set_server         <span class="hljs-operator">|</span> utf8mb4 <br><span class="hljs-operator">||</span> character_set_system         <span class="hljs-operator">|</span> utf8 <br><span class="hljs-operator">||</span> collation_connection         <span class="hljs-operator">|</span> utf8mb4_unicode_ci <br><span class="hljs-operator">||</span> collation_database             <span class="hljs-operator">|</span> utf8mb4_unicode_ci <br><span class="hljs-operator">||</span> collation_server                 <span class="hljs-operator">|</span> utf8mb4_unicode_ci<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------+--------------------+</span><br></code></pre></td></tr></table></figure>

<p>必须保证:<br><code>character_set_client</code>、<code>character_se_connection</code>、<code>character_set_database</code>、<code>character_set_results</code>、<code>character_set_server</code>为<code>utf8mb4</code>。</p>
</li>
<li><p>更新客户端配置文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">jdbc.driverClassName</span>=com.mysql.jdbc.Driver<br><span class="hljs-attr">jdbc.url</span>=jdbc:mysql://localhost:<span class="hljs-number">3306</span>/database?useUnicode=<span class="hljs-literal">true</span>&amp;characterEncoding=utf8&amp;autoReconnect=<span class="hljs-literal">true</span>&amp;rewriteBatchedStatements=<span class="hljs-literal">true</span><br><span class="hljs-attr">jdbc.username</span>=username<br><span class="hljs-attr">jdbc.password</span>=password<br></code></pre></td></tr></table></figure>

<p>注意：<code>jdbc.url</code>的内容,<code>characterEncoding=utf8</code>可以被自动识别为<code>utf8bm4</code>  </p>
</li>
<li><p>修改数据库、表和列的字符集SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> DATABASE database_name <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_unicode_ci;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">CONVERT</span> <span class="hljs-keyword">TO</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name table_name CHANGE column_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">1024</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci;<br></code></pre></td></tr></table></figure>
</li>
<li><p>修改应用连接字符串(druid)：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc-driver&#125;&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc-url&#125;&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc-user&#125;&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc-password&#125;&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;filters&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;stat&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxWait&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;60000&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3000&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;300000&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;validationQuery&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SELECT &#x27;x&#x27;&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testWhileIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnBorrow&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnReturn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;poolPreparedStatements&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolPreparedStatementPerConnectionSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;connectionInitSqls&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;set names utf8mb4;&quot;</span>/&gt;</span>  //必须添加<br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>注意：<code>mysql-connector-java</code>驱动在<code>5.1.13</code>之前是不支持<code>utf8mb4</code>，请使用<code>5.1.13</code>以后的版本。</p>
</li>
</ol>
<h2 id="Collectors-toMap-报错"><a href="#Collectors-toMap-报错" class="headerlink" title="Collectors.toMap 报错"></a><code>Collectors.toMap</code> 报错</h2><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><ol>
<li><p>当<code>value</code>为<code>null</code>时会报错</p>
<p>解决方法为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List.stream().collect(HashMap::<span class="hljs-keyword">new</span>,(m,v)-&gt;m.put(v.getId(),v.getValue()),HashMap::putAll);<br></code></pre></td></tr></table></figure></li>
<li><p>当主键重复时会报错，解决方法为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List.stream().collect(Collectors.toMap(V::getId, V::getValue, (oldValue, newValue) -&gt; newValue));<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>以<code>Oracle JDK1.8.0_291</code>为例，查询<code>Collectors.toMap</code>调用链，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T, K, U&gt;<br>    Collector&lt;T, ?, Map&lt;K,U&gt;&gt; toMap(Function&lt;? <span class="hljs-built_in">super</span> T, ? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">K</span>&gt; keyMapper,<br>                                    Function&lt;? <span class="hljs-built_in">super</span> T, ? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">U</span>&gt; valueMapper) &#123;<br>        <span class="hljs-keyword">return</span> toMap(keyMapper, valueMapper, throwingMerger(), HashMap::<span class="hljs-keyword">new</span>);<br>    &#125;<br></code></pre></td></tr></table></figure>
<p>这里找到<code>throwingMerger()</code>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;T&gt; BinaryOperator&lt;T&gt; <span class="hljs-title function_">throwingMerger</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (u,v) -&gt; &#123; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(String.format(<span class="hljs-string">&quot;Duplicate key %s&quot;</span>, u)); &#125;;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>可以看出默认的合并方法是不允许重复key出现的。</p>
<p>往下继续看，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T, K, U, M <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Map</span>&lt;K, U&gt;&gt;<br>    Collector&lt;T, ?, M&gt; toMap(Function&lt;? <span class="hljs-built_in">super</span> T, ? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">K</span>&gt; keyMapper,<br>                                Function&lt;? <span class="hljs-built_in">super</span> T, ? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">U</span>&gt; valueMapper,<br>                                BinaryOperator&lt;U&gt; mergeFunction,<br>                                Supplier&lt;M&gt; mapSupplier) &#123;<br>        BiConsumer&lt;M, T&gt; accumulator<br>                = (map, element) -&gt; map.merge(keyMapper.apply(element),<br>                                              valueMapper.apply(element), mergeFunction);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CollectorImpl</span>&lt;&gt;(mapSupplier, accumulator, mapMerger(mergeFunction), CH_ID);<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>找到<code>map.merge</code>的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">default</span> V <span class="hljs-title function_">merge</span><span class="hljs-params">(K key, V value,</span><br><span class="hljs-params">            BiFunction&lt;? <span class="hljs-built_in">super</span> V, ? <span class="hljs-built_in">super</span> V, ? extends V&gt; remappingFunction)</span> &#123;<br>        Objects.requireNonNull(remappingFunction);<br>        Objects.requireNonNull(value);<br>        <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> get(key);<br>        <span class="hljs-type">V</span> <span class="hljs-variable">newValue</span> <span class="hljs-operator">=</span> (oldValue == <span class="hljs-literal">null</span>) ? value :<br>                   remappingFunction.apply(oldValue, value);<br>        <span class="hljs-keyword">if</span>(newValue == <span class="hljs-literal">null</span>) &#123;<br>            remove(key);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            put(key, newValue);<br>        &#125;<br>        <span class="hljs-keyword">return</span> newValue;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>从这里就可以看出来默认的<code>toMap</code>思想是不支持重复键，也不支持空值。</p>
<p>向下找到<code>HashMap</code>的实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">merge</span><span class="hljs-params">(K key, V value,</span><br><span class="hljs-params">                   BiFunction&lt;? <span class="hljs-built_in">super</span> V, ? <span class="hljs-built_in">super</span> V, ? extends V&gt; remappingFunction)</span> &#123;<br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>        <span class="hljs-keyword">if</span> (remappingFunction == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>            ......<br>        <span class="hljs-keyword">if</span> (old != <span class="hljs-literal">null</span>) &#123;<br>            V v;<br>            <span class="hljs-keyword">if</span> (old.value != <span class="hljs-literal">null</span>)<br>                v = remappingFunction.apply(old.value, value);<br>            <span class="hljs-keyword">else</span><br>                v = value;<br>            <span class="hljs-keyword">if</span> (v != <span class="hljs-literal">null</span>) &#123;<br>                old.value = v;<br>                afterNodeAccess(old);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                removeNode(hash, key, <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span> v;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>可以看出，和默认方法基本一致，也就导致了报错。</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring data jpa demo</title>
    <url>/posts/945da7b/</url>
    <content><![CDATA[<h2 id="ORM简介"><a href="#ORM简介" class="headerlink" title="ORM简介"></a><code>ORM简介</code></h2><p>对象关系映射（<code>Object Relational Mapping</code>，简称<code>ORM</code>）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。是连接数据库的桥梁，只要提供了持久化类与表的映射关系，<code>ORM</code>框架在运行时就能参照映射文件的信息，把对象持久化到数据库中。</p>
<h2 id="部分对比"><a href="#部分对比" class="headerlink" title="部分对比"></a>部分对比</h2><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a><code>JDBC</code></h3><h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a><code>JdbcTemplate</code></h3><h3 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a><code>JPA</code></h3><h3 id="My-I-batis"><a href="#My-I-batis" class="headerlink" title="My(I)batis"></a><code>My(I)batis</code></h3><span id="more"></span>

<h2 id="JPA-demo"><a href="#JPA-demo" class="headerlink" title="JPA demo"></a>JPA demo</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>idea新建Spring Initializr项目，选择<code>Lombok</code>,<code>Spring Data JPA</code>,<code>MySQL Driver</code>,<code>Spring Web</code>等相关依赖。</p>
<p>编写相关配置文件<code>application.properties</code>或者采用<code>.yml</code>格式，这里使用<code>.yml</code>格式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;allowMultiQueries=true&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">jpa</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">jpa1234</span><br>  <span class="hljs-attr">jpa:</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">database-platform:</span> <span class="hljs-string">org.hibernate.dialect.MySQL5InnoDBDialect</span><br>    <span class="hljs-attr">show-sql:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">hibernate:</span><br>      <span class="hljs-attr">ddl-auto:</span> <span class="hljs-string">update</span><br></code></pre></td></tr></table></figure>

<h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = &quot;base_user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主键，用户id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GenericGenerator(name = &quot;idGenerator&quot;, strategy = &quot;org.hibernate.id.UUIDGenerator&quot;)</span><br>    <span class="hljs-meta">@GeneratedValue(generator = &quot;idGenerator&quot;)</span><br>    <span class="hljs-keyword">private</span> String userId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Column(name = &quot;user_name&quot;, unique = true, nullable = false, length = 64)</span><br>    <span class="hljs-keyword">private</span> String userName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户密码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Column(name = &quot;password&quot;, nullable = false, length = 128)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户邮箱</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Column(name = &quot;email&quot;, nullable = false, length = 64)</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>主键采用UUID策略<br> <code>@GenericGenerator</code>是Hibernate提供的主键生成策略注解，注意下面的<code>@GeneratedValue</code>（JPA注解）使用generator &#x3D; “idGenerator”引用了上面的name &#x3D; “idGenerator”主键生成策略</p>
</blockquote>
<blockquote>
<p>JPA自带的几种主键生成策略</p>
<ul>
<li>TABLE： 使用一个特定的数据库表格来保存主键</li>
<li>SEQUENCE： 根据底层数据库的序列来生成主键，条件是数据库支持序列。这个值要与generator一起使用，generator 指定生成主键使用的生成器（可能是orcale中自己编写的序列）</li>
<li>IDENTITY： 主键由数据库自动生成（主要是支持自动增长的数据库，如mysql）</li>
<li>AUTO： 主键由程序控制，也是GenerationType的默认值</li>
</ul>
</blockquote>
<p>如果需要给表添加注释，需要使用<code>@Column(nullable = false,columnDefinition = &quot;varchar(100) default &#39;&#39; comment &#39;我是字段注释...&#39;&quot;)</code>,这个时候<code>length</code>的值就不起作用了，因此使用<code>columnDefinition</code>时需要写全字段类型、长度等属性。</p>
<p>为了在数据库生成相应注释，这里采用<code>columnDefinition</code>的写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = &quot;base_user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GenericGenerator(name = &quot;idGenerator&quot;, strategy = &quot;org.hibernate.id.UUIDGenerator&quot;)</span><br>    <span class="hljs-meta">@GeneratedValue(generator = &quot;idGenerator&quot;)</span><br>    <span class="hljs-keyword">private</span> String userId;<br><br>    <span class="hljs-meta">@Column(name = &quot;user_name&quot;, unique = true, nullable = false, columnDefinition = &quot;varchar(64) comment &#x27;用户名&#x27;&quot;)</span><br>    <span class="hljs-keyword">private</span> String userName;<br><br>    <span class="hljs-meta">@Column(name = &quot;password&quot;, nullable = false, columnDefinition = &quot;varchar(128) comment &#x27;用户密码&#x27;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@Column(name = &quot;email&quot;, nullable = false, columnDefinition = &quot;varchar(64) comment &#x27;用户邮箱&#x27;&quot;)</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="创建repository"><a href="#创建repository" class="headerlink" title="创建repository"></a>创建repository</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;User,String&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>这时候启动项目，可以看见控制台输出相应的创建表语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">Hibernate: <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> base_user (user_id <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>, email <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;用户邮箱&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>, password <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;用户密码&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>, user_name <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;用户名&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>, <span class="hljs-keyword">primary</span> key (user_id)) engine<span class="hljs-operator">=</span>InnoDB<br></code></pre></td></tr></table></figure>

<p>通过navicat或者idea自带的连接工具查看数据库test，可以发现已经建立了<code>base_user</code>的表。</p>
<p>这个时候在实体类中添加一个字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModelProperty(value = &quot;用户昵称&quot;)</span><br><span class="hljs-meta">@Column(name = &quot;nick_name&quot;, nullable = false, columnDefinition = &quot;varchar(64) comment &#x27;用户昵称&#x27;&quot;)</span><br><span class="hljs-keyword">private</span> String nickName;<br></code></pre></td></tr></table></figure>

<p>重新启动项目，会发现控制台输出</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">Hibernate: <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> base_user <span class="hljs-keyword">add</span> <span class="hljs-keyword">column</span> nick_name <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;用户昵称&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="配置swagger"><a href="#配置swagger" class="headerlink" title="配置swagger"></a>配置swagger</h3><p>为了方便测试，采用swagger2来生成api文档，这里使用3.0.0版本，pom中只需要添加一项依赖即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>配置类：</p>
<p>在3.0版本中，移除了<code>@EnableSwagger2</code>的注解，在应用类注解<code>@EnableOpenApi</code>即可加入swagger文档。为了实现一些自定义配置，还是可以写一个配置类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Swagger2Config</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.OAS_30)<br>                .apiInfo(apiInfo())<br>                .select()<br>                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))<br>                .paths(PathSelectors.any())<br>                .build();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;jpa测试接口文档&quot;</span>)<br>                .description(<span class="hljs-string">&quot;采用swagger2 3.0版本&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;xx&quot;</span>, <span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;xx@qq.com&quot;</span>))<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="添加controller"><a href="#添加controller" class="headerlink" title="添加controller"></a>添加controller</h3><p>这里为了方便，直接将repository注入到controller中进行实现，省略了中间的service层。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableOpenApi</span><br><span class="hljs-meta">@Api(tags = &quot;基础数据通用接口&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserRepository userRepository;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;新增用户&quot;, httpMethod = &quot;POST&quot;, response = String.class)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Validated</span> User user)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userRepository.save(user);<br>        <span class="hljs-keyword">return</span> result.getUserId();<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;更新用户&quot;, httpMethod = &quot;POST&quot;, response = String.class)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/update&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Validated</span> User user)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userRepository.saveAndFlush(user);<br>        <span class="hljs-keyword">return</span> result.getUserId();<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;查询用户详情&quot;, httpMethod = &quot;GET&quot;, response = User.class)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/detail&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserDetail</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;userId&quot;)</span> String userId)</span> &#123;<br>        Optional&lt;User&gt; user = userRepository.findById(userId);<br>        <span class="hljs-keyword">return</span> user.orElse(<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;查询用户列表&quot;, httpMethod = &quot;GET&quot;, response = User.class)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">()</span> &#123;<br>        List&lt;User&gt; userList = userRepository.findAll();<br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;删除用户&quot;, httpMethod = &quot;DELETE&quot;, response = Boolean.class)</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/detail&quot;)</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;userId&quot;)</span> String userId)</span> &#123;<br>        userRepository.deleteById(userId);<br>        <span class="hljs-keyword">return</span> Boolean.TRUE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>启动项目，在浏览器中打开<a class="link"   href="http://localhost:9001/swagger-ui/#/" >http://localhost:9001/swagger-ui/#/<i class="fas fa-external-link-alt"></i></a>即可看到API文档并进行测试了。</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>泛型与反射</title>
    <url>/posts/6a9738f6/</url>
    <content><![CDATA[<p>使用反射获取泛型对象的方法、属性、注解。</p>
<span id="more"></span>

<p>本文使用以下实体进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AaDTO</span> &#123;<br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-keyword">private</span> Integer aaInteger;<br>    <span class="hljs-keyword">public</span> String aaString;<br><br>    <span class="hljs-keyword">private</span> Integer <span class="hljs-title function_">getAaInteger</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> aaInteger;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAaInteger</span><span class="hljs-params">(Integer aaInteger)</span> &#123;<br>        <span class="hljs-built_in">this</span>.aaInteger = aaInteger;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAaString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> aaString;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAaString</span><span class="hljs-params">(String aaString)</span> &#123;<br>        <span class="hljs-built_in">this</span>.aaString = aaString;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AaDTO</span><span class="hljs-params">(Integer aaInteger, String aaString)</span> &#123;<br>        <span class="hljs-built_in">this</span>.aaInteger = aaInteger;<br>        <span class="hljs-built_in">this</span>.aaString = aaString;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AaDTO</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="获取字段值"><a href="#获取字段值" class="headerlink" title="获取字段值"></a>获取字段值</h3><p>使用<code>getFields()</code>获取所有<code>public</code>字段，但无法获取到<code>private</code>字段；</p>
<p>使用<code>getDeclaredField(String name)</code>获取指定<code>public</code>字段；</p>
<p>对<code>field</code>设置<code>field.setAccessible(true)</code>可获取到<code>private</code>字段；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">getFields</span><span class="hljs-params">(T t)</span> &#123;<br>        Class&lt;?&gt; tClass = t.getClass();<br>        Field[] fields = tClass.getFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            System.out.println(<span class="hljs-string">&quot;field name:&quot;</span> + field.getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;field value:&quot;</span> + field.get(t));<br>            &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">auditResult</span> <span class="hljs-operator">=</span> tClass.getDeclaredField(<span class="hljs-string">&quot;aaString&quot;</span>);<br>            auditResult.setAccessible(<span class="hljs-literal">true</span>);<br>            System.out.println(<span class="hljs-string">&quot;aaString value:&quot;</span> + auditResult.get(t));<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>



<h3 id="获取方法并调用"><a href="#获取方法并调用" class="headerlink" title="获取方法并调用"></a>获取方法并调用</h3><p>使用<code>getDeclaredMethods()</code>获取所有方法,包括<code>private</code>方法，但是在调用<code>private</code>方法时会抛出<code>IllegalAccessException</code>；</p>
<p>使用<code>getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)</code>获取指定<code>public</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMethods</span><span class="hljs-params">(T t)</span> &#123;<br>        Class&lt;?&gt; tClass = t.getClass();<br>        Method[] methods = tClass.getDeclaredMethods();<br>        Arrays.stream(methods)<br>                .filter(method-&gt;method.getName().contains(<span class="hljs-string">&quot;get&quot;</span>))<br>                .forEach(method-&gt;&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;调用了方法:&quot;</span> + method.getName() + <span class="hljs-string">&quot; 值为:&quot;</span> + method.invoke(t));<br>                    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;非法调用了方法:&quot;</span> + method.getName());<br>                        method.setAccessible(<span class="hljs-literal">true</span>);<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            System.out.println(<span class="hljs-string">&quot;修改为可访问后,方法:&quot;</span> + method.getName() + <span class="hljs-string">&quot; 值为:&quot;</span> + method.invoke(t));<br>                        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException | InvocationTargetException illegalAccessException) &#123;<br>                            illegalAccessException.printStackTrace();<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;);<br><br>    &#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的中缀表达式转后缀及计算</title>
    <url>/posts/7fc2f592/</url>
    <content><![CDATA[<p>c++版本</p>
<span id="more"></span>


<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pri</span><span class="hljs-params">(<span class="hljs-type">char</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-string">&#x27;/&#x27;</span> || x==<span class="hljs-string">&#x27;*&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-string">&#x27;+&#x27;</span> || x==<span class="hljs-string">&#x27;-&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-string">&#x27;(&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">in_to_post</span><span class="hljs-params">(string input)</span></span><br><span class="hljs-function"></span>&#123;<br>    stack&lt;<span class="hljs-type">char</span>&gt; s;<br>    vector&lt;string&gt; post;<br>    string t=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(input[i])<br>    &#123;<br>        <span class="hljs-type">char</span> tmp = (<span class="hljs-type">char</span>)input[i];<br>        <span class="hljs-keyword">if</span>(tmp &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; tmp &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>        &#123;<br><br>            string num_tmp;<br>            <span class="hljs-type">int</span> j = i;<br>            <span class="hljs-keyword">while</span>((tmp &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; tmp &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) || tmp == <span class="hljs-string">&#x27;.&#x27;</span>)<br>            &#123;<br>                num_tmp += tmp;<br>                tmp = (<span class="hljs-type">char</span>)input[++j];<br>            &#125;<br>            post.<span class="hljs-built_in">push_back</span>(num_tmp);<br>            i = j<span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br><br>            <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">empty</span>())<br>            &#123;<br>                s.<span class="hljs-built_in">push</span>(tmp);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmp==<span class="hljs-string">&#x27;(&#x27;</span>)<br>            &#123;<br>                s.<span class="hljs-built_in">push</span>(tmp);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmp==<span class="hljs-string">&#x27;)&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">while</span>(s.<span class="hljs-built_in">top</span>()!=<span class="hljs-string">&#x27;(&#x27;</span>)<br>                &#123;<br>                    t = <span class="hljs-string">&quot;&quot;</span>;<br>                    t += s.<span class="hljs-built_in">top</span>();<br>                    post.<span class="hljs-built_in">push_back</span>(t);<br>                    s.<span class="hljs-built_in">pop</span>();<br>                &#125;<br>                s.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">while</span>(<span class="hljs-built_in">pri</span>(tmp)&lt;=<span class="hljs-built_in">pri</span>(s.<span class="hljs-built_in">top</span>()))<br>                &#123;<br>                    t = <span class="hljs-string">&quot;&quot;</span>;<br>                    t += s.<span class="hljs-built_in">top</span>();<br>                    post.<span class="hljs-built_in">push_back</span>(t);<br>                    s.<span class="hljs-built_in">pop</span>();<br>                    <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">empty</span>())<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>                s.<span class="hljs-built_in">push</span>(tmp);<br>            &#125;<br>        &#125;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!s.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        t = <span class="hljs-string">&quot;&quot;</span>;<br>        t += s.<span class="hljs-built_in">top</span>();<br>        post.<span class="hljs-built_in">push_back</span>(t);<br>        s.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> post;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">double</span> a,<span class="hljs-type">double</span> b,<span class="hljs-type">char</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;+&#x27;</span>)<br>        <span class="hljs-keyword">return</span> a+b;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>)<br>        <span class="hljs-keyword">return</span> a-b;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;*&#x27;</span>)<br>        <span class="hljs-keyword">return</span> a*b;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;/&#x27;</span>)<br>        <span class="hljs-keyword">return</span> a/b;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">myisdigit</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;s.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[i]!=<span class="hljs-string">&#x27;.&#x27;</span>&amp;&amp;(s[i]&lt;<span class="hljs-string">&#x27;0&#x27;</span>||s[i]&gt;<span class="hljs-string">&#x27;9&#x27;</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">postcal</span><span class="hljs-params">(vector&lt;string&gt; in)</span></span><br><span class="hljs-function"></span>&#123;<br>    stack&lt;string&gt; s;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;in.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        string tmp = in[i];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">myisdigit</span>(tmp))<br>        &#123;<br>            s.<span class="hljs-built_in">push</span>(tmp);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">double</span> b = <span class="hljs-built_in">stod</span>(s.<span class="hljs-built_in">top</span>());<br>            s.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-type">double</span> a= <span class="hljs-built_in">stod</span>(s.<span class="hljs-built_in">top</span>());<br>            s.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-type">char</span> c = tmp[<span class="hljs-number">0</span>];<br>            <span class="hljs-type">double</span> r = <span class="hljs-built_in">cal</span>(a,b,c);<br>            s.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">to_string</span>(r));<br>        &#125;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">stod</span>(s.<span class="hljs-built_in">top</span>());<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string input;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    vector&lt;string&gt; postinput;<br>    cout&lt;&lt;<span class="hljs-string">&quot;请输入中缀表达式：&quot;</span>&lt;&lt;endl;<br>    cin&gt;&gt;input;<br><br>    postinput=<span class="hljs-built_in">in_to_post</span>(input);<br>    cout&lt;&lt;<span class="hljs-string">&quot;后缀表达式为：&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;postinput.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        cout&lt;&lt;postinput[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br><br>    <span class="hljs-type">double</span> res = <span class="hljs-built_in">postcal</span>(postinput);<br><br>    cout&lt;&lt;endl&lt;&lt;<span class="hljs-string">&quot;结果为：&quot;</span>&lt;&lt;res&lt;&lt;endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">请输入中缀表达式：</span><br><span class="hljs-comment">1.2*((2/4.3)*3.2)</span><br><span class="hljs-comment">后缀表达式为：</span><br><span class="hljs-comment">1.2 2 4.3 / 3.2 * *</span><br><span class="hljs-comment">结果为：1.78605</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">to_string stod均为c++11特性,需编译器支持,</span><br><span class="hljs-comment">in codeblocks,go to settings-&gt;compiler-&gt;check the &quot;have g++ follow the c++11 ISO...&quot;</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>逆波兰</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>二分法</title>
    <url>/posts/ebbfa50c/</url>
    <content><![CDATA[<h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>从已经排好顺序的数组当中找到目标所在位置或者是正确地向数组中插入一个目标。</p>
<span id="more"></span>



<h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>将整个数组不停地拆分为两段（每一段有左边界<code>left</code>和右边界<code>right</code>），用分隔两段的数（<code>mid</code>处值）与目标相比较，观察目标处于哪一段，最终段长小于2时，便可唯一确定位置，其时间复杂度为log<sub>2</sub>n。</p>
<h3 id="划分的具体过程"><a href="#划分的具体过程" class="headerlink" title="划分的具体过程"></a>划分的具体过程</h3><p>这里列出一种<code>划分&amp;确定边界&amp;结束</code>的方法，仅供参考。</p>
<p>如下列数组<code>&#123;1,2,4,8,16&#125;</code>,<code>target=11</code>，查找其应该插入的位置，<code>left</code>意味着<code>target</code>至少应该从该位置插入</p>
<table>
<thead>
<tr>
<th align="center">步骤</th>
<th>说明</th>
<th align="center">a[0]</th>
<th align="center">a[1]</th>
<th align="center">a[2]</th>
<th align="center">a[3]</th>
<th align="center">a[4]</th>
<th align="center">target</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td></td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">4</td>
<td align="center">8</td>
<td align="center">16</td>
<td align="center">11</td>
</tr>
<tr>
<td align="center">0</td>
<td>left&#x3D;0,right&#x3D;4,mid&#x3D;(left+right)&#x2F;2&#x3D;2</td>
<td align="center">left</td>
<td align="center"></td>
<td align="center">mid</td>
<td align="center"></td>
<td align="center">right</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">1</td>
<td>因a[mid]&#x3D;4&lt;target<br />left需右移至mid+1<br />故left&#x3D;3,right&#x3D;4,mid &#x3D; (3+4)&#x2F;2 &#x3D; 3</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">left<br />mid</td>
<td align="center">right</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">2</td>
<td>a[mid]&#x3D;8&lt;target,left右移至4<br />mid &#x3D; 4</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">left<br />mid<br />right</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">3</td>
<td>到这一步段距为1了，再做一下判断target&lt;a[mid]&#x3D;16,因此right&#x3D;mid-1&#x3D;3,至此，左边界超过了右边界，那么左边界就是我们需要查找的位置</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">right</td>
<td align="center">left<br />mid</td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h2><h3 id="中值计算"><a href="#中值计算" class="headerlink" title="中值计算"></a>中值计算</h3><p><code>mid = (left+right)/2</code>在left和right值很大的时候可能造成数值溢出导致结果错误，因此可以换一种写法<code>mid = left+(right-left)/2</code>。</p>
<p>经过了解，还有另外一种写法就是<code>mid = (left+right)&gt;&gt;&gt;1</code>,其中，<code>&gt;&gt;&gt;</code>表示无符号右移运算符，其在右移时左边空位会补上0，也就是会变成正数。</p>
<h3 id="确定边界"><a href="#确定边界" class="headerlink" title="确定边界"></a>确定边界</h3><p>在每次判断时，根据不同的使用场景可以确定不同左右边界，可以直接使用<code>mid</code>值作为下一次的<code>左/右</code>边界，也可以使用<code>mid+1/-1</code>作为下一次的<code>左/右</code>边界。对于每种不同的方式，其结束循环的条件也有细微差异，需要仔细确认。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = nums.length, mid;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            mid = (left + right) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-简单工厂模式</title>
    <url>/posts/b3ea5b44/</url>
    <content><![CDATA[<p>对于输入的不同参数，会有不同的执行，如对以下的参数进行判断执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuditDTO</span> &#123;<br>    Integer auditResult;<br>    String auditContent;<br>    <br>    <span class="hljs-keyword">public</span> getter and setter;<br>&#125;<br></code></pre></td></tr></table></figure>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">AuditResultEnum</span> &#123;<br>    SUCCESS(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;成功&quot;</span>),<br>    FAIL(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;失败&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Integer code;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String message;<br>    <br>    <span class="hljs-keyword">public</span> getter;<br>    <br>    AuditResultEnum(Integer code, String message) &#123;<br>        <span class="hljs-built_in">this</span>.message = message;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AuditResultEnum <span class="hljs-title function_">getByCode</span><span class="hljs-params">(Integer code)</span> &#123;<br>        <span class="hljs-keyword">for</span> (AuditResultEnum _enum : values()) &#123;<br>            <span class="hljs-keyword">if</span> (_enum.getCode().equals(code)) &#123;<br>                <span class="hljs-keyword">return</span> _enum;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>以面向过程的思维编写程序的话，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (AuditResultEnum.getByCode(audit.getAuditResult())) &#123;<br>            <span class="hljs-keyword">case</span> SUCCESS:<br>                System.out.println(SUCCESS.getMessage());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> FAIL:<br>                 System.out.println(FAIL.getMessage());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;error&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure>

<p>对于这种最简单的switch这样写当然是没问题的，但是如果情况变得复杂，需要选择的条件变多之后，一旦某种情况需要修改，或是进行增加操作，直接在这段本就已经十分臃肿冗杂的代码里面进行修改，很有可能导致一些意想不到的问题；而且对于该段逻辑的修改需要编译整段代码，这样也是我们所不希望看见的。</p>
<p>那么如何使用工厂模式进行改进呢？</p>
<p>对于每一种case，将其置为一种实现，一般来说，每一种case我们都会处理相同的数据，如上文的<code>auditResult</code>，然后有不同的实现，因此我们需要一个抽象类，类中定义好我们所需要的数据&amp;抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Audit</span> &#123;<br>    Integer auditResult;<br>    String auditContent;<br>    <br>    <span class="hljs-keyword">public</span> getter and setter;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">audit</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuditFail</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Audit</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">audit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.setAuditResult(AuditResultEnum.FAIL.getCode());<br>        <span class="hljs-built_in">this</span>.setAuditContent(AuditResultEnum.FAIL.getMessage());<br><br>        System.out.println(<span class="hljs-built_in">this</span>.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuditSuccess</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Audit</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">audit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.setAuditResult(AuditResultEnum.SUCCESS.getCode());<br>        <span class="hljs-built_in">this</span>.setAuditContent(AuditResultEnum.SUCCESS.getMessage());<br><br>        System.out.println(<span class="hljs-built_in">this</span>.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>然后将代码中的<code>switch</code>语句提取出来，进行判断何时使用何类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuditFactory</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">audit</span><span class="hljs-params">(AuditDTO audit)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (AuditResultEnum.getByCode(audit.getAuditResult())) &#123;<br>            <span class="hljs-keyword">case</span> SUCCESS:<br>                <span class="hljs-type">AuditSuccess</span> <span class="hljs-variable">auditSuccess</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuditSuccess</span>();<br>                auditSuccess.setAuditResult(audit.getAuditResult());<br>                auditSuccess.setAuditContent(audit.getAuditContent());<br>                auditSuccess.audit();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> FAIL:<br>                <span class="hljs-type">AuditFail</span> <span class="hljs-variable">auditFail</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuditFail</span>();<br>                auditFail.setAuditResult(audit.getAuditResult());<br>                auditFail.setAuditContent(audit.getAuditContent());<br>                auditFail.audit();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;error&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>然后我们在业务中，只需要简单地调用该工厂函数即可，以后对于某种case的修改只需要到该情况的case类中进行修改，而不必在业务实现的代码中修改，避免出错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FactoryPatternTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AuditDTO</span> <span class="hljs-variable">auditFailure</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuditDTO</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;我觉得可以失败&quot;</span>);<br>        <span class="hljs-type">AuditDTO</span> <span class="hljs-variable">auditSuccess</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuditDTO</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;我觉得可以成功&quot;</span>);<br>        <br>        <span class="hljs-type">AuditFactory</span> <span class="hljs-variable">auditFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuditFactory</span>();<br>        auditFactory.audit(auditFailure);<br>        auditFactory.audit(auditSuccess);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理</title>
    <url>/posts/118b8ca3/</url>
    <content><![CDATA[<h1 id="第一章引论"><a href="#第一章引论" class="headerlink" title="第一章	引论"></a>第一章	引论</h1><h2 id="什么叫编译程序"><a href="#什么叫编译程序" class="headerlink" title="什么叫编译程序"></a>什么叫编译程序</h2><p><strong>翻译程序</strong>：把某一种语言程序（称为<strong>源语言</strong>程序）转换成另一种语言程序（称为<strong>目标语言</strong>程序）。</p>
<span id="more"></span>

<p><strong>解释程序</strong>：以源语言写的源程序作为输入，但不产生目标程序，而是边解释边执行源程序本身。<br>优点：易于查错<br>缺点：效率低，运行速度慢</p>
<p><strong>编译程序</strong>：源语言为高级语言，目标语言为汇编语言或机器语言之类的“低级语言”的翻译程序。<br>优点：只需分析和翻译一次，<br>缺点：在运行中发现的错误必须在源程序中查找</p>
<p><em>(运行编译程序的计算机称<strong>宿主机</strong>，运行编译程序所产生目标代码的计算机称*<em>目标机</em></em>)*</p>
<ul>
<li>诊断编译程序：专门用于帮助程序开发和调试</li>
<li>优化编译程序：着重于提高目标代码效率</li>
<li>交叉编译程序：产生不同于其宿主机的机器代码</li>
<li>可变目标编译程序：不需重写编译程序中与机器无关的部分就能改变目标机</li>
</ul>
<p>世界上第一个编译程序–FORTRAN编译程序是20世纪50年代中期研制成功的。</p>
<h2 id="编译程序的结构"><a href="#编译程序的结构" class="headerlink" title="编译程序的结构"></a>编译程序的结构</h2><p><img  
                     lazyload
                     alt="image"
                     data-src="https://i.loli.net/2019/04/02/5ca35e7179f8d.png"
                      alt="编译程序结构.png"
                ><br><strong>词法分析器</strong>：又称<strong>扫描器</strong>，输入源程序，进行词法分析，输出单词符号。</p>
<p><strong>语法分析器</strong>：简称<strong>分析器</strong>，对单词符号串进行语法分析（根据与法规则进行推导或归约），识别出各类语法单位，最终判断输入串是否构成语法上正确的“程序”。</p>
<p><strong>语义分析与中间代码产生器</strong>：按照语义规则对语法分析器归约出（或推导出）的语法单位进行语义分析并把它们翻译成一定形式的中间代码。<br>中间代码可采用四元式、三元式、间接三元式、逆波兰记号和树形表示等等。<br>例如：许多编译程序采用四元序列形式：<br>Z :&#x3D; (X + 0.418)*Y&#x2F;w 翻译成四元式为：<br><img  
                     lazyload
                     alt="image"
                     data-src="https://i.loli.net/2019/04/12/5cb08214a1577.png"
                      alt="四元式.png"
                ></p>
<p><strong>优化器</strong>：对中间代码进行优化处理。</p>
<p><strong>目标代码生成器</strong>：把中间代码翻译成目标程序。</p>
<p>表格中最重要的是<strong>符号表</strong>，出错处理中<strong>出错处理程序</strong>。</p>
<p><strong>遍</strong>：具体实现编译过程时，受不同源语言、设计要求、使用对象和计算机条件（如主存容量）的限制，往往将编译程序组织为若干<strong>遍</strong>（Pass）。所谓“遍”就是对源程序或源程序的中间结果从头到尾扫描一次，并作有关的加工处理，生成新的中间结果或目标程序。</p>
<p><strong>编译前端与后端</strong>：前端主要由与源语言有关但与目标机无关的那些部分（词法分析、语法分析、语义分析、中间代码产生）组成，后端反之，包括与目标机有关的代码优化和目标代码生成等。通常，后端不依赖于源语言而仅仅依赖于<strong>中间语言</strong>。</p>
<p>Ada程序设计环境APSE中使用一种称为Diana的树形结构的中间语言；<br>Java语言环境中，虚拟机代码Bytecode。</p>
<p><strong>程序设计环境</strong>：编译程序与编辑程序、连接程序、调试工具等一起构成。</p>
]]></content>
      <tags>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云CentOS6搭建Jenkins</title>
    <url>/posts/5c39734/</url>
    <content><![CDATA[<h4 id="安装jenkins"><a href="#安装jenkins" class="headerlink" title="安装jenkins"></a>安装<code>jenkins</code></h4><span id="more"></span>

<p>首先下载安装包，因为<a class="link"   href="https://pkg.jenkins.io/redhat-stable/" >官方源<i class="fas fa-external-link-alt"></i></a>用着实在是太慢了，因此换用清华大学的<a class="link"   href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/redhat/" >开源镜像站<i class="fas fa-external-link-alt"></i></a>，选择一个版本，服务器中输入<code>wget 版本链接</code>，</p>
<p>输入<code>rpm -ivh 文件</code>进行安装，完成后<code>vim /etc/sysconfig/jenkins </code>修改端口以免冲突;</p>
<p>输入<code>which java</code>查看<code>jdk</code>地址，修改<code>jenkins</code>配置，<code>vim /etc/init.d/jenkins</code></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://cdn.jsdelivr.net/gh/v-hiker/pic_repository/img/jenkins-java.png"
                      alt="jenkins-java"
                ></p>
<p>先<code>service jenkins start</code>，在浏览器打开<code>ip:端口</code>让<code>jenkins</code>加载必要的文件。</p>
<p><em>为了提高下载速度，需要先设置更新源为其他国内镜像源</em></p>
<p>输入<code>vi /var/lib/jenkins/updates/default.json </code>后参照<a class="link"   href="https://www.cnblogs.com/hellxz/p/jenkins_install_plugins_faster.html" >Jenkins安装插件提速<i class="fas fa-external-link-alt"></i></a>进行修改，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">:1,<span class="hljs-variable">$s</span>/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g<br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">:1,<span class="hljs-variable">$s</span>/http:\/\/www.google.com/https:\/\/www.baidu.com/g<br></code></pre></td></tr></table></figure>

<p>或者进入目录下，在终端直接输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27;</span> default.json &amp;&amp; sed -i <span class="hljs-string">&#x27;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#x27;</span> default.json<br></code></pre></td></tr></table></figure>

<p>接下来<code>service jenkins restart</code>启动，输入<code>ip:端口</code>，会看见<code>jenkins</code>启动中。</p>
<p>按照提示查看密码并输入：</p>
<p><code>cat /var/lib/jenkins/secrets/initialAdminPassword</code></p>
<p>然后安装推荐的插件，等待安装完成。</p>
<p>成功进入<code>jenkins</code>界面后，依次点击<code>Manage Jenkins-Manage Plugins-Advanced</code>，拉到最下面，将默认的检查更新源</p>
<p>更改为<code>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</code>,这可以加快获取列表的速度。</p>
<h4 id="配置jenkins所需插件"><a href="#配置jenkins所需插件" class="headerlink" title="配置jenkins所需插件"></a>配置<code>jenkins</code>所需插件</h4><p>检查是否已安装以下两个插件：</p>
<ol>
<li><p><code>Maven Integration</code> 使我们可以开始一个<code>maven</code>项目作为任务</p>
</li>
<li><p><code>Git plugin</code> 使我们可以读取存放在<code>git</code>仓库的项目</p>
</li>
</ol>
<p>如果没有，就去插件管理里面搜索安装。</p>
<h4 id="配置jenkins全局工具"><a href="#配置jenkins全局工具" class="headerlink" title="配置jenkins全局工具"></a>配置<code>jenkins</code>全局工具</h4><p>系统管理 –&gt; 全局工具配置</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://cdn.jsdelivr.net/gh/v-hiker/pic_repository/img/20200424210313.png"
                     
                ></p>
<p>主要是配置<code>jdk</code>和<code>git</code>的地址，<code>which java</code>和<code>which git</code>查看就行了。</p>
<h4 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h4><h5 id="maven项目"><a href="#maven项目" class="headerlink" title="maven项目"></a><code>maven</code>项目</h5><p><img  
                     lazyload
                     alt="image"
                     data-src="https://cdn.jsdelivr.net/gh/v-hiker/pic_repository/img/20200424210813.png"
                     
                ></p>
<p>点击“新建任务”，输入名称，选择构建<code>maven</code>项目。</p>
<p>如图，添加源码位置，这里可以添加<code>Credentials</code>，一般使用<code>https</code>的方式添加源码就行了。使用<code>ssh</code>还需要到服务器里生成公钥添加到<code>git</code>。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://cdn.jsdelivr.net/gh/v-hiker/pic_repository/img/20200424210947.png"
                     
                ></p>
<p>接下来添加<code>build goal</code>，<code>clean package -Dmaven.test.skip=true</code>这个是用来生成拥有<code>Spring</code>启动程序的项目的代码，如果是用来生成<code>api</code>供自己的程序使用，需要用<code>clean install -Dmaven.test.skip=true</code>这个命令。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://cdn.jsdelivr.net/gh/v-hiker/pic_repository/img/image-20200424211711910.png"
                     
                ></p>
<p>最后添加<code>Post Steps</code></p>
<p>选中<code>Run only if build succeeds</code>,<code>add post-build step</code>选择<code>执行shell</code>，按照如下格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span> <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">export</span> BUILD_ID=dontKillMe这一句很重要，这样指定了，项目启动之后才不会被Jenkins杀掉。</span><br>export BUILD_ID=dontKillMe<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定最后编译好的jar存放的位置</span><br>www_path=/usr/jars<br><span class="hljs-meta prompt_">#</span><span class="language-bash">Jenkins中编译好的jar位置,其中md_metadata是自己的项目名称</span><br>jar_path=/var/lib/jenkins/workspace/md_metadata/target/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Jenkins中编译好的jar名称，注意改成自己的项目名称</span><br>jar_name=metadata-0.0.1-SNAPSHOT.jar<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">获取运行编译好的进程ID，便于我们在重新部署项目的时候先杀掉以前的进程，注意改成自己的项目名称</span><br>pid=`ps -ef | grep metadata-0.0.1-SNAPSHOT.jar | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`<br>if [ -n &quot;$pid&quot; ]<br>then<br>   kill -9 $pid<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入指定的编译好的jar的位置</span><br>cd  $&#123;jar_path&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将编译好的jar复制到最后指定的位置</span><br>cp  $&#123;jar_path&#125;/$&#123;jar_name&#125; $&#123;www_path&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入最后指定存放jar的位置</span><br>cd  $&#123;www_path&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动jar</span><br>java -jar $&#123;jar_name&#125; &amp;<br><br></code></pre></td></tr></table></figure>

<p>点击保存，ok。</p>
<h5 id="流水线任务"><a href="#流水线任务" class="headerlink" title="流水线任务"></a>流水线任务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">node&#123;<br>    stage(&quot;starter&quot;)&#123;<br>        echo &quot;run starter&quot;<br>        build job:&quot;md_starter&quot;<br>    &#125;<br>    stage(&quot;eureka&quot;)&#123;<br>        echo &quot;run eureka&quot;<br>        build job:&quot;md_eureka&quot;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
</search>
